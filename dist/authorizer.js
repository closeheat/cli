var Authorizer,Color,Config,Log,Promise,Urls,fs,inquirer,request;fs=require("fs"),inquirer=require("inquirer"),request=require("request"),Promise=require("bluebird"),Log=require("./log"),Urls=require("./urls"),Color=require("./color"),Config=require("./config"),module.exports=Authorizer=function(){function o(){}return o.prototype.saveToken=function(o){var e;return e={access_token:o},Config.update("access_token",o),Log=require("./log"),Log.doneLine("Access token saved.")},o.prototype.accessToken=function(){return Config.fileContents().access_token},o.prototype.login=function(o){var e;return null==o&&(o=function(){}),e=[{message:"Your email address",name:"email",type:"input"},{message:"Your password",name:"password",type:"password"}],inquirer.prompt(e,function(e){return function(r){return e.getToken(r).then(function(){return Log.br(),o()})["catch"](function(r){return 401===r.code?"locked"===r.status?(Log.error("Too many invalid logins. Account locked for 1 hour.",!1),Log.innerError("Check your email for unlock instructions or contact the support at "+Color.violet("closeheat.com/support")+".")):(Log.error("Wrong password or email. Please try again",!1),e.login(o)):Log.backendError()})}}(this))},o.prototype.getToken=function(o){return new Promise(function(e){return function(r,t){return request({url:Urls.getToken(),qs:o,method:"post",json:!0},function(o,n){return o&&Log.error(o),200===n.statusCode?(e.saveToken(n.body.access_token),r()):t({code:n.statusCode,status:n.body.status})})}}(this))},o.prototype.forceLogin=function(o){return Log.stop(),Log.br(),Log.p(Color.redYellow("Please login to closeheat.com to check out your app list.")),this.login(o)},o.prototype.unauthorized=function(o){return 401===o.statusCode},o.prototype.checkLoggedIn=function(o,e){return this.unauthorized(o)?this.forceLogin(e):void 0},o}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1dGhvcml6ZXIuY29mZmVlIiwiYXV0aG9yaXplci5qcyJdLCJuYW1lcyI6WyJBdXRob3JpemVyIiwiQ29sb3IiLCJDb25maWciLCJMb2ciLCJQcm9taXNlIiwiVXJscyIsImZzIiwiaW5xdWlyZXIiLCJyZXF1ZXN0IiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJwcm90b3R5cGUiLCJzYXZlVG9rZW4iLCJhY2Nlc3NfdG9rZW4iLCJjb25maWciLCJ1cGRhdGUiLCJkb25lTGluZSIsImFjY2Vzc1Rva2VuIiwiZmlsZUNvbnRlbnRzIiwibG9naW4iLCJjYiIsImxvZ2luX3F1ZXN0aW9ucyIsIm1lc3NhZ2UiLCJuYW1lIiwidHlwZSIsInByb21wdCIsIl90aGlzIiwiYW5zd2VycyIsImdldFRva2VuIiwidGhlbiIsImJyIiwicmVzcCIsImNvZGUiLCJzdGF0dXMiLCJlcnJvciIsImlubmVyRXJyb3IiLCJ2aW9sZXQiLCJiYWNrZW5kRXJyb3IiLCJ0aGlzIiwicmVzb2x2ZSIsInJlamVjdCIsInVybCIsInFzIiwibWV0aG9kIiwianNvbiIsImVyciIsInN0YXR1c0NvZGUiLCJib2R5IiwiZm9yY2VMb2dpbiIsInN0b3AiLCJwIiwicmVkWWVsbG93IiwidW5hdXRob3JpemVkIiwiY2hlY2tMb2dnZWRJbiJdLCJtYXBwaW5ncyI6IkFBQUEsR0FBQUEsWUFBQUMsTUFBQUMsT0FBQUMsSUFBQUMsUUFBQUMsS0FBQUMsR0FBQUMsU0FBQUMsT0FBQUYsSUFBS0csUUFBUSxNQUFiRixTQUNXRSxRQUFRLFlBRG5CRCxRQUVVQyxRQUFRLFdBRmxCTCxRQUdVSyxRQUFRLFlBSGxCTixJQUtNTSxRQUFRLFNBTGRKLEtBTU9JLFFBQVEsVUFOZlIsTUFPUVEsUUFBUSxXQVBoQlAsT0FRU08sUUFBUSxZQVJqQkMsT0FVT0MsUUFDRFgsV0FBQSxXQ1FKLFFBQVNBLE1BaUdULE1EeEdBQSxHQUFBWSxVQUFBQyxVQUFXLFNBQUNDLEdBQ1YsR0FBQUMsRUNlQSxPRGZBQSxJQUFXRCxhQUFjQSxHQUN6QlosT0FBT2MsT0FBTyxlQUFnQkYsR0FDOUJYLElBQU1NLFFBQVEsU0FDZE4sSUFBSWMsU0FBUyx3QkFKZmpCLEVBQUFZLFVBTUFNLFlBQWEsV0NjWCxNRGJBaEIsUUFBT2lCLGVBQWVMLGNBUHhCZCxFQUFBWSxVQVNBUSxNQUFPLFNBQUNDLEdBQ04sR0FBQUMsRUM2QkEsT0FkVSxPQUFORCxJRGhCRUEsRUFBSyxjQUNYQyxJQUVJQyxRQUFTLHFCQUNUQyxLQUFNLFFBQ05DLEtBQU0sVUFHTkYsUUFBUyxnQkFDVEMsS0FBTSxXQUNOQyxLQUFNLGFBSVZsQixTQUFTbUIsT0FBT0osRUFBaUIsU0FBQUssR0NpQi9CLE1EakIrQixVQUFDQyxHQ2tCOUIsTURqQkZELEdBQUNFLFNBQVNELEdBQVNFLEtBQUssV0NtQnBCLE1EbEJGM0IsS0FBSTRCLEtBQ0pWLE1BQ0EsU0FBTSxTQUFDVyxHQUNQLE1BQWdCLE9BQWJBLEVBQUtDLEtBQ1ksV0FBZkQsRUFBS0UsUUFDTi9CLElBQUlnQyxNQUFNLHVEQUF1RCxHQUNqRWhDLElBQUlpQyxXQUFZLHNFQUFxRW5DLE1BQU1vQyxPQUFPLHlCQUF5QixPQUUzSGxDLElBQUlnQyxNQUFNLDZDQUE2QyxHQUN2RFIsRUFBQ1AsTUFBTUMsSUFHVGxCLElBQUltQyxtQkFkdUJDLFFBdkJuQ3ZDLEVBQUFZLFVBdUNBaUIsU0FBVSxTQUFDRCxHQ3VCVCxNRHRCSSxJQUFBeEIsU0FBUSxTQUFBdUIsR0N1QlYsTUR2QlUsVUFBQ2EsRUFBU0MsR0N3QmxCLE1EdkJGakMsVUFBUWtDLElBQUtyQyxLQUFLd0IsV0FBWWMsR0FBSWYsRUFBU2dCLE9BQVEsT0FBUUMsTUFBTSxHQUFNLFNBQUNDLEVBQUtkLEdBRzNFLE1BRmtCYyxJQUFsQjNDLElBQUlnQyxNQUFNVyxHQUVZLE1BQW5CZCxFQUFLZSxZQUNOcEIsRUFBQ2QsVUFBVW1CLEVBQUtnQixLQUFLbEMsY0FDckIwQixLQUVBQyxHQUFPUixLQUFNRCxFQUFLZSxXQUFZYixPQUFRRixFQUFLZ0IsS0FBS2QsYUFSMUNLLFFBeENkdkMsRUFBQVksVUFrREFxQyxXQUFZLFNBQUM1QixHQ3lDWCxNRHhDQWxCLEtBQUkrQyxPQUNKL0MsSUFBSTRCLEtBQ0o1QixJQUFJZ0QsRUFBRWxELE1BQU1tRCxVQUFVLDhEQUN0QmIsS0FBQ25CLE1BQU1DLElBdERUckIsRUFBQVksVUF3REF5QyxhQUFjLFNBQUNyQixHQ3VDYixNRHRDbUIsT0FBbkJBLEVBQUtlLFlBekRQL0MsRUFBQVksVUEyREEwQyxjQUFlLFNBQUN0QixFQUFNWCxHQUNwQixNQUFHa0IsTUFBQ2MsYUFBYXJCLEdBQ2ZPLEtBQUNVLFdBQVc1QixHQURkLFFDNENLckIiLCJmaWxlIjoiYXV0aG9yaXplci5qcyIsInNvdXJjZXNDb250ZW50IjpbImZzID0gcmVxdWlyZSAnZnMnXG5pbnF1aXJlciA9IHJlcXVpcmUgJ2lucXVpcmVyJ1xucmVxdWVzdCA9IHJlcXVpcmUgJ3JlcXVlc3QnXG5Qcm9taXNlID0gcmVxdWlyZSAnYmx1ZWJpcmQnXG5cbkxvZyA9IHJlcXVpcmUgJy4vbG9nJ1xuVXJscyA9IHJlcXVpcmUgJy4vdXJscydcbkNvbG9yID0gcmVxdWlyZSAnLi9jb2xvcidcbkNvbmZpZyA9IHJlcXVpcmUgJy4vY29uZmlnJ1xuXG5tb2R1bGUuZXhwb3J0cyA9XG5jbGFzcyBBdXRob3JpemVyXG4gIHNhdmVUb2tlbjogKGFjY2Vzc190b2tlbikgLT5cbiAgICBjb25maWcgPSB7IGFjY2Vzc190b2tlbjogYWNjZXNzX3Rva2VuIH1cbiAgICBDb25maWcudXBkYXRlKCdhY2Nlc3NfdG9rZW4nLCBhY2Nlc3NfdG9rZW4pXG4gICAgTG9nID0gcmVxdWlyZSAnLi9sb2cnXG4gICAgTG9nLmRvbmVMaW5lKCdBY2Nlc3MgdG9rZW4gc2F2ZWQuJylcblxuICBhY2Nlc3NUb2tlbjogLT5cbiAgICBDb25maWcuZmlsZUNvbnRlbnRzKCkuYWNjZXNzX3Rva2VuXG5cbiAgbG9naW46IChjYiA9IC0+KSAtPlxuICAgIGxvZ2luX3F1ZXN0aW9ucyA9ICBbXG4gICAgICB7XG4gICAgICAgIG1lc3NhZ2U6ICdZb3VyIGVtYWlsIGFkZHJlc3MnXG4gICAgICAgIG5hbWU6ICdlbWFpbCdcbiAgICAgICAgdHlwZTogJ2lucHV0J1xuICAgICAgfVxuICAgICAge1xuICAgICAgICBtZXNzYWdlOiAnWW91ciBwYXNzd29yZCdcbiAgICAgICAgbmFtZTogJ3Bhc3N3b3JkJ1xuICAgICAgICB0eXBlOiAncGFzc3dvcmQnXG4gICAgICB9XG4gICAgXVxuXG4gICAgaW5xdWlyZXIucHJvbXB0IGxvZ2luX3F1ZXN0aW9ucywgKGFuc3dlcnMpID0+XG4gICAgICBAZ2V0VG9rZW4oYW5zd2VycykudGhlbigtPlxuICAgICAgICBMb2cuYnIoKVxuICAgICAgICBjYigpXG4gICAgICApLmNhdGNoIChyZXNwKSA9PlxuICAgICAgICBpZiByZXNwLmNvZGUgPT0gNDAxXG4gICAgICAgICAgaWYgcmVzcC5zdGF0dXMgPT0gJ2xvY2tlZCdcbiAgICAgICAgICAgIExvZy5lcnJvcignVG9vIG1hbnkgaW52YWxpZCBsb2dpbnMuIEFjY291bnQgbG9ja2VkIGZvciAxIGhvdXIuJywgZmFsc2UpXG4gICAgICAgICAgICBMb2cuaW5uZXJFcnJvcihcIkNoZWNrIHlvdXIgZW1haWwgZm9yIHVubG9jayBpbnN0cnVjdGlvbnMgb3IgY29udGFjdCB0aGUgc3VwcG9ydCBhdCAje0NvbG9yLnZpb2xldCgnY2xvc2VoZWF0LmNvbS9zdXBwb3J0Jyl9LlwiKVxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIExvZy5lcnJvcihcIldyb25nIHBhc3N3b3JkIG9yIGVtYWlsLiBQbGVhc2UgdHJ5IGFnYWluXCIsIGZhbHNlKVxuICAgICAgICAgICAgQGxvZ2luKGNiKVxuXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBMb2cuYmFja2VuZEVycm9yKClcblxuICBnZXRUb2tlbjogKGFuc3dlcnMpIC0+XG4gICAgbmV3IFByb21pc2UgKHJlc29sdmUsIHJlamVjdCkgPT5cbiAgICAgIHJlcXVlc3QgdXJsOiBVcmxzLmdldFRva2VuKCksIHFzOiBhbnN3ZXJzLCBtZXRob2Q6ICdwb3N0JywganNvbjogdHJ1ZSwgKGVyciwgcmVzcCkgPT5cbiAgICAgICAgTG9nLmVycm9yKGVycikgaWYgZXJyXG5cbiAgICAgICAgaWYgcmVzcC5zdGF0dXNDb2RlID09IDIwMFxuICAgICAgICAgIEBzYXZlVG9rZW4ocmVzcC5ib2R5LmFjY2Vzc190b2tlbilcbiAgICAgICAgICByZXNvbHZlKClcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHJlamVjdChjb2RlOiByZXNwLnN0YXR1c0NvZGUsIHN0YXR1czogcmVzcC5ib2R5LnN0YXR1cylcblxuICBmb3JjZUxvZ2luOiAoY2IpIC0+XG4gICAgTG9nLnN0b3AoKVxuICAgIExvZy5icigpXG4gICAgTG9nLnAgQ29sb3IucmVkWWVsbG93KCdQbGVhc2UgbG9naW4gdG8gY2xvc2VoZWF0LmNvbSB0byBjaGVjayBvdXQgeW91ciBhcHAgbGlzdC4nKVxuICAgIEBsb2dpbihjYilcblxuICB1bmF1dGhvcml6ZWQ6IChyZXNwKSAtPlxuICAgIHJlc3Auc3RhdHVzQ29kZSA9PSA0MDFcblxuICBjaGVja0xvZ2dlZEluOiAocmVzcCwgY2IpIC0+XG4gICAgaWYgQHVuYXV0aG9yaXplZChyZXNwKVxuICAgICAgQGZvcmNlTG9naW4oY2IpXG4iLG51bGxdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==