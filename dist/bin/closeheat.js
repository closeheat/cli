#!/usr/bin/env node

var Apps,Authorizer,Cloner,Config,Creator,DeployLog,Deployer,Log,Server,Updater,fs,path,pkg,program,_;program=require("commander"),_=require("lodash"),fs=require("fs"),path=require("path"),pkg=require("../../package.json"),Creator=require("../creator"),Server=require("../server"),Deployer=require("../deployer"),Apps=require("../apps"),Authorizer=require("../authorizer"),Cloner=require("../cloner"),Log=require("../log"),Updater=require("../updater"),DeployLog=require("../deploy_log"),Config=require("../config"),(new Updater).update().then(function(){return program.version(pkg.version).usage("<keywords>"),program.command("create [app-name]").description("Creates a new app with clean setup and directory structure.").option("-f, --framework [name]","Framework").option("-t, --template [name]","Template").option("--javascript [name]","Javascript precompiler").option("--html [name]","HTML precompiler").option("--css [name]","CSS precompiler").option("--tmp [path]","The path of temporary directory when creating").option("--dist [path]","Path of destination of where to create app dir").option("--no-deploy","Do not create GitHub repo and closeheat app").action(function(e,r){var o,t,n;return t=_.pick.apply(_,[r,"framework","template","javascript","html","css","dist","tmp","deploy"]),t.name=e,Log.logo(),n=["framework","template","javascript","html","css"],o=_.any(_.keys(t),function(e){return _.contains(n,e)}),o?(new Creator).createFromSettings(t):(new Creator).createFromPrompt(t)}),program.command("server").description("Runs a server which builds and LiveReloads your app.").option("--ip [ip]","IP to run LiveReload on (default - localhost)").option("-p, --port [port]","Port to run server on (default - 4000)").action(function(e){return(new Server).start(e)}),program.command("deploy").description("Deploys your app to closeheat.com via GitHub.").action(function(){return Log.logo(),(new Deployer).deploy()}),program.command("log").description("Polls the log of the last deployment. Usable: git push origin master && closeheat log").action(function(){return Log.logo(),(new DeployLog).fromCurrentCommit()}),program.command("open").description("Opens your deployed app in the browser.").action(function(){return Log.logo(),(new Deployer).open()}),program.command("apps").description("Shows a list of your deployed apps.").action(function(){return(new Apps).list()}),program.command("login").option("-t, --token [access-token]","Access token from closeheat.com.").description("Log in to closeheat.com with this computer.").action(function(e){return e.token?(new Authorizer).saveToken(e.token):(new Authorizer).login()}),program.command("clone [app-name]").description("Clones the closeheat app files.").action(function(e){return e?(new Cloner).clone(e):(new Apps).list()}),program.command("transform [type] [language]").description("Transforms files in current dir to other language (Experimental).").action(function(e,r){var o,t,n,a;return Log.logo(),o=require("../dirs"),t=require("../transformer"),n=new o({name:"transforming",src:process.cwd(),dist:process.cwd()}),a={},a[e]=r,new t(n).transform(a).then(function(){return function(){return console.log("transformed",a)}}(this))}),program.command("help").description("Displays this menu.").action(function(){return Log.logo(0),program.help()}),program.parse(process.argv),program.args.length?void 0:void(fs.existsSync("index.html")||fs.existsSync("index.jade")?(new Server).start():(Log.logo(0),program.help()))});
//# sourceMappingURL=data:application/json;base64,