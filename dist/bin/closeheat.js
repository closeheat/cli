#!/usr/bin/env node

var Log,Updater,fs,path,pkg,program,_;program=require("commander"),_=require("lodash"),fs=require("fs"),path=require("path"),pkg=require("../../package.json"),Updater=require("../updater"),Log=require("../log"),(new Updater).update().then(function(){var e;return program.version(pkg.version).usage("<keywords>"),program.command("create [app-name]").description("Creates a new app with clean setup and directory structure.").option("-f, --framework [name]","Framework").option("-t, --template [name]","Template").option("--javascript [name]","Javascript precompiler").option("--html [name]","HTML precompiler").option("--css [name]","CSS precompiler").option("--tmp [path]","The path of temporary directory when creating").option("--dist [path]","Path of destination of where to create app dir").option("--no-deploy","Do not create GitHub repo and closeheat app").action(function(e,r){var o,t,n,a;return o=require("../creator"),n=_.pick.apply(_,[r,"framework","template","javascript","html","css","dist","tmp","deploy"]),n.name=e,Log.logo(),a=["framework","template","javascript","html","css"],t=_.any(_.keys(n),function(e){return _.contains(a,e)}),t?(new o).createFromSettings(n):(new o).createFromPrompt(n)}),program.command("server").description("Runs a server which builds and LiveReloads your app.").option("--ip [ip]","IP to run LiveReload on (default - localhost)").option("-p, --port [port]","Port to run server on (default - 4000)").action(function(e){var r;return r=require("../server"),(new r).start(e)}),program.command("deploy").description("Deploys your app to closeheat.com via GitHub.").action(function(){var e;return e=require("../deployer"),Log.logo(),(new e).deploy()}),program.command("log").description("Polls the log of the last deployment. Usable: git push origin master && closeheat log").action(function(){var e;return e=require("../deploy_log"),Log.logo(),(new e).fromCurrentCommit()}),program.command("open").description("Opens your deployed app in the browser.").action(function(){var e;return e=require("../deployer"),(new e).open()}),program.command("apps").description("Shows a list of your deployed apps.").action(function(){var e;return e=require("../apps"),(new e).list()}),program.command("login").option("-t, --token [access-token]","Access token from closeheat.com.").description("Log in to closeheat.com with this computer.").action(function(e){var r;return r=require("../authorizer"),e.token?(new r).saveToken(e.token):(new r).login()}),program.command("clone [app-name]").description("Clones the closeheat app files.").action(function(e){var r,o;return e?(o=require("../cloner"),(new o).clone(e)):(r=require("../apps"),(new r).list())}),program.command("transform [type] [language]").description("Transforms files in current dir to other language (Experimental).").action(function(e,r){var o,t,n,a;return o=require("../dirs"),t=require("../transformer"),Log.logo(),n=new o({name:"transforming",src:process.cwd(),dist:process.cwd()}),a={},a[e]=r,new t(n).transform(a).then(function(){return function(){return console.log("transformed",a)}}(this))}),program.command("help").description("Displays this menu.").action(function(){return Log.logo(0),program.help()}),program.parse(process.argv),program.args.length?void 0:fs.existsSync("index.html")||fs.existsSync("index.jade")?(e=require("../server"),(new e).start()):(Log.logo(0),program.help())});
//# sourceMappingURL=data:application/json;base64,