var Builder,Color,Dirs,Log,Promise,Watcher,chokidar,moment,path,rimraf,tinylr,util,_,__bind=function(r,e){return function(){return r.apply(e,arguments)}};chokidar=require("chokidar"),util=require("util"),rimraf=require("rimraf"),path=require("path"),tinylr=require("tiny-lr"),Promise=require("bluebird"),moment=require("moment"),_=require("lodash"),Builder=require("closeheat-builder"),Dirs=require("./dirs"),Log=require("./log"),Color=require("./color"),module.exports=Watcher=function(){function r(r,e){this.src=r,this.dist=e,this.build=__bind(this.build,this),this.watcher=chokidar.watch(this.src,{ignored:/.git/,ignoreInitial:!0})}return r.prototype.run=function(){return this.watcher.on("error",function(r){return Log.error(r)}).on("all",_.throttle(function(r){return function(e,i){return r.build(e,i)}}(this),2e3))},r.prototype.build=function(r,e){return new Promise(function(r){return function(i,t){return e&&r.logFileChanged(e),r.execBuild(i,t)}}(this))},r.prototype.execBuild=function(r){return Log.spin("Building the app."),rimraf.sync(this.dist),new Builder(this.src,this.dist,Dirs.buildTmp()).on("module-detected",function(r){return Log.spin("New require detected. Installing "+Color.orange(r)+".")}).on("module-installed",function(r){return Log.stop(),Log.inner(""+Color.orange(r)+" installed.")}).build().then(function(){return tinylr.changed("/"),r(),Log.stop(),Log.inner(""+Color.violet(moment().format("hh:mm:ss"))+" | App built.")})["catch"](function(r){return Log.error("Could not compile",!1),Log.innerError(r,!1),Log.br()})},r.prototype.logFileChanged=function(r){var e;return e=path.relative(this.src,r),Log.stop(),Log.br(),Log.doneLine(""+e+" changed.")},r}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndhdGNoZXIuY29mZmVlIiwid2F0Y2hlci5qcyJdLCJuYW1lcyI6WyJCdWlsZGVyIiwiQ29sb3IiLCJEaXJzIiwiTG9nIiwiUHJvbWlzZSIsIldhdGNoZXIiLCJjaG9raWRhciIsIm1vbWVudCIsInBhdGgiLCJyaW1yYWYiLCJ0aW55bHIiLCJ1dGlsIiwiXyIsIl9fYmluZCIsImZuIiwibWUiLCJhcHBseSIsImFyZ3VtZW50cyIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic3JjIiwiZGlzdCIsInRoaXMiLCJidWlsZCIsIndhdGNoZXIiLCJ3YXRjaCIsImlnbm9yZWQiLCJpZ25vcmVJbml0aWFsIiwicHJvdG90eXBlIiwicnVuIiwib24iLCJlcnIiLCJlcnJvciIsInRocm90dGxlIiwiX3RoaXMiLCJlIiwiZmlsZSIsInJlc29sdmUiLCJyZWplY3QiLCJsb2dGaWxlQ2hhbmdlZCIsImV4ZWNCdWlsZCIsInNwaW4iLCJzeW5jIiwiYnVpbGRUbXAiLCJvcmFuZ2UiLCJzdG9wIiwiaW5uZXIiLCJ0aGVuIiwiY2hhbmdlZCIsInZpb2xldCIsImZvcm1hdCIsImlubmVyRXJyb3IiLCJiciIsInJlbGF0aXZlIiwiZG9uZUxpbmUiXSwibWFwcGluZ3MiOiJBQUFBLEdBQUFBLFNBQUFDLE1BQUFDLEtBQUFDLElBQUFDLFFBQUFDLFFBQUFDLFNBQUFDLE9BQUFDLEtBQUFDLE9BQUFDLE9BQUFDLEtBQUFDLEVBQUFDLE9BQUEsU0FBQUMsRUFBQUMsR0FBQSxNQUFBLFlBQUEsTUFBQUQsR0FBQUUsTUFBQUQsRUFBQUUsWUFBQVgsVUFBWVksUUFBUSxZQUFwQlAsS0FDT08sUUFBUSxRQURmVCxPQUVTUyxRQUFRLFVBRmpCVixLQUdPVSxRQUFRLFFBSGZSLE9BSVNRLFFBQVEsV0FKakJkLFFBS1VjLFFBQVEsWUFMbEJYLE9BTVNXLFFBQVEsVUFOakJOLEVBT0lNLFFBQVEsVUFQWmxCLFFBU1VrQixRQUFRLHFCQVRsQmhCLEtBV09nQixRQUFRLFVBWGZmLElBYU1lLFFBQVEsU0FiZGpCLE1BY1FpQixRQUFRLFdBZGhCQyxPQWdCT0MsUUFDRGYsUUFBQSxXQUNTLFFBQUFBLEdBQUVnQixFQUFNQyxHQUFQQyxLQUFDRixJQUFBQSxFQUFLRSxLQUFDRCxLQUFBQSxFQUNuQkMsS0FBQUMsTUFBQVgsT0FBQVUsS0FBQUMsTUFBQUQsTUFBQUEsS0FBQ0UsUUFBVW5CLFNBQVNvQixNQUFNSCxLQUFDRixLQUN6Qk0sUUFBUyxPQUNUQyxlQUFlLElDa0VuQixNRHJFQXZCLEdBQUF3QixVQUtBQyxJQUFLLFdDZ0JILE1EZkFQLE1BQUNFLFFBQ0VNLEdBQUcsUUFBUyxTQUFDQyxHQ2VkLE1EZnNCN0IsS0FBSThCLE1BQU1ELEtBQy9CRCxHQUFHLE1BQU9uQixFQUFFc0IsU0FBVSxTQUFBQyxHQ2dCdkIsTURoQnVCLFVBQUNDLEVBQUdDLEdDaUJ6QixNRGpCa0NGLEdBQUNYLE1BQU1ZLEVBQUdDLEtBQXZCZCxNQUErQixPQVIxRGxCLEVBQUF3QixVQVVBTCxNQUFPLFNBQUNZLEVBQUdDLEdDcUJULE1EcEJJLElBQUFqQyxTQUFRLFNBQUErQixHQ3FCVixNRHJCVSxVQUFDRyxFQUFTQyxHQ3lCbEIsTUR4QnVCRixJQUF6QkYsRUFBQ0ssZUFBZUgsR0FDaEJGLEVBQUNNLFVBQVVILEVBQVNDLEtBRlZoQixRQVhkbEIsRUFBQXdCLFVBZUFZLFVBQVcsU0FBQ0gsR0M2QlYsTUQ1QkFuQyxLQUFJdUMsS0FBSyxxQkFDVGpDLE9BQU9rQyxLQUFLcEIsS0FBQ0QsTUFFVCxHQUFBdEIsU0FBUXVCLEtBQUNGLElBQUtFLEtBQUNELEtBQU1wQixLQUFLMEMsWUFDN0JiLEdBQUcsa0JBQW1CLFNBQUNaLEdDeUJ0QixNRHhCQWhCLEtBQUl1QyxLQUFNLG9DQUFtQ3pDLE1BQU00QyxPQUFPMUIsR0FBUSxPQUVuRVksR0FBRyxtQkFBb0IsU0FBQ1osR0N5QnZCLE1EeEJBaEIsS0FBSTJDLE9BQ0ozQyxJQUFJNEMsTUFBTSxHQUFHOUMsTUFBTTRDLE9BQU8xQixHQUFRLGlCQUVuQ0ssUUFBUXdCLEtBQUssV0MwQlosTUR6QkF0QyxRQUFPdUMsUUFBUSxLQUNmWCxJQUNBbkMsSUFBSTJDLE9BQ0ozQyxJQUFJNEMsTUFBTSxHQUFHOUMsTUFBTWlELE9BQU8zQyxTQUFTNEMsT0FBTyxhQUFhLG1CQUN2RCxTQUFNLFNBQUNuQixHQ3lCUCxNRHhCQTdCLEtBQUk4QixNQUFNLHFCQUFxQixHQUMvQjlCLElBQUlpRCxXQUFXcEIsR0FBSyxHQUNwQjdCLElBQUlrRCxRQW5DUmhELEVBQUF3QixVQXNDQVcsZUFBZ0IsU0FBQ0gsR0FDZixHQUFBaUIsRUMyQkEsT0QzQkFBLEdBQVc5QyxLQUFLOEMsU0FBUy9CLEtBQUNGLElBQUtnQixHQUMvQmxDLElBQUkyQyxPQUNKM0MsSUFBSWtELEtBQ0psRCxJQUFJb0QsU0FBUyxHQUFHRCxFQUFTLGNDMkJwQmpEIiwiZmlsZSI6IndhdGNoZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjaG9raWRhciAgPSByZXF1aXJlICdjaG9raWRhcidcbnV0aWwgPSByZXF1aXJlICd1dGlsJ1xucmltcmFmID0gcmVxdWlyZSAncmltcmFmJ1xucGF0aCA9IHJlcXVpcmUgJ3BhdGgnXG50aW55bHIgPSByZXF1aXJlICd0aW55LWxyJ1xuUHJvbWlzZSA9IHJlcXVpcmUgJ2JsdWViaXJkJ1xubW9tZW50ID0gcmVxdWlyZSAnbW9tZW50J1xuXyA9IHJlcXVpcmUgJ2xvZGFzaCdcblxuQnVpbGRlciA9IHJlcXVpcmUgJ2Nsb3NlaGVhdC1idWlsZGVyJ1xuXG5EaXJzID0gcmVxdWlyZSAnLi9kaXJzJ1xuXG5Mb2cgPSByZXF1aXJlICcuL2xvZydcbkNvbG9yID0gcmVxdWlyZSAnLi9jb2xvcidcblxubW9kdWxlLmV4cG9ydHMgPVxuY2xhc3MgV2F0Y2hlclxuICBjb25zdHJ1Y3RvcjogKEBzcmMsIEBkaXN0KSAtPlxuICAgIEB3YXRjaGVyID0gY2hva2lkYXIud2F0Y2ggQHNyYyxcbiAgICAgIGlnbm9yZWQ6IC8uZ2l0L1xuICAgICAgaWdub3JlSW5pdGlhbDogdHJ1ZVxuXG4gIHJ1bjogLT5cbiAgICBAd2F0Y2hlclxuICAgICAgLm9uKCdlcnJvcicsIChlcnIpIC0+IExvZy5lcnJvcihlcnIpKVxuICAgICAgLm9uKCdhbGwnLCBfLnRocm90dGxlKCgoZSwgZmlsZSkgPT4gQGJ1aWxkKGUsIGZpbGUpKSwgMjAwMCkpXG5cbiAgYnVpbGQ6IChlLCBmaWxlKSA9PlxuICAgIG5ldyBQcm9taXNlIChyZXNvbHZlLCByZWplY3QpID0+XG4gICAgICBAbG9nRmlsZUNoYW5nZWQoZmlsZSkgaWYgZmlsZVxuICAgICAgQGV4ZWNCdWlsZChyZXNvbHZlLCByZWplY3QpXG5cbiAgZXhlY0J1aWxkOiAocmVzb2x2ZSwgcmVqZWN0KSAtPlxuICAgIExvZy5zcGluKCdCdWlsZGluZyB0aGUgYXBwLicpXG4gICAgcmltcmFmLnN5bmMoQGRpc3QpXG5cbiAgICBuZXcgQnVpbGRlcihAc3JjLCBAZGlzdCwgRGlycy5idWlsZFRtcCgpKVxuICAgIC5vbignbW9kdWxlLWRldGVjdGVkJywgKG1vZHVsZSkgLT5cbiAgICAgIExvZy5zcGluKFwiTmV3IHJlcXVpcmUgZGV0ZWN0ZWQuIEluc3RhbGxpbmcgI3tDb2xvci5vcmFuZ2UobW9kdWxlKX0uXCIpXG4gICAgKVxuICAgIC5vbignbW9kdWxlLWluc3RhbGxlZCcsIChtb2R1bGUpIC0+XG4gICAgICBMb2cuc3RvcCgpXG4gICAgICBMb2cuaW5uZXIgXCIje0NvbG9yLm9yYW5nZShtb2R1bGUpfSBpbnN0YWxsZWQuXCJcbiAgICApXG4gICAgLmJ1aWxkKCkudGhlbigtPlxuICAgICAgdGlueWxyLmNoYW5nZWQoJy8nKVxuICAgICAgcmVzb2x2ZSgpXG4gICAgICBMb2cuc3RvcCgpXG4gICAgICBMb2cuaW5uZXIoXCIje0NvbG9yLnZpb2xldChtb21lbnQoKS5mb3JtYXQoJ2hoOm1tOnNzJykpfSB8IEFwcCBidWlsdC5cIilcbiAgICApLmNhdGNoKChlcnIpIC0+XG4gICAgICBMb2cuZXJyb3IoJ0NvdWxkIG5vdCBjb21waWxlJywgZmFsc2UpXG4gICAgICBMb2cuaW5uZXJFcnJvcihlcnIsIGZhbHNlKVxuICAgICAgTG9nLmJyKClcbiAgICApXG5cbiAgbG9nRmlsZUNoYW5nZWQ6IChmaWxlKSAtPlxuICAgIHJlbGF0aXZlID0gcGF0aC5yZWxhdGl2ZShAc3JjLCBmaWxlKVxuICAgIExvZy5zdG9wKClcbiAgICBMb2cuYnIoKVxuICAgIExvZy5kb25lTGluZShcIiN7cmVsYXRpdmV9IGNoYW5nZWQuXCIpXG4iLG51bGxdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==