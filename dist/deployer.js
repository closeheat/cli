var Authorized,Color,DeployLog,Deployer,Git,Initializer,Log,Promise,Urls,fs,inquirer,open,_;Promise=require("bluebird"),Git=require("git-wrapper"),inquirer=require("inquirer"),_=require("lodash"),open=require("open"),fs=require("fs.extra"),Initializer=require("./initializer"),Authorized=require("./authorized"),Urls=require("./urls"),DeployLog=require("./deploy_log"),Log=require("./log"),Color=require("./color"),module.exports=Deployer=function(){function e(){this.git=new Git}var t;return e.prototype.deploy=function(){return Log.spin("Deploying the app to closeheat.com via Github."),this.initGit().then(function(e){return function(){return e.addEverything().then(function(){return Log.stop(),Log.inner("All files added."),e.commit("Deploy via CLI").then(function(){return Log.inner("Files commited."),Log.inner("Pushing to Github."),e.pushToMainBranch().then(function(e){return Log.inner("Pushed to "+e+" branch on Github."),(new DeployLog).fromCurrentCommit().then(function(e){var t;return t="http://"+e+".closeheatapp.com",Log.p("App deployed to "+Color.violet(t)+"."),Log.p("Open it quicker with:"),Log.code("cd "+e),Log.code("closeheat open")})})})})}}(this))["catch"](function(e){return Log.error(e)})["finally"](function(){return process.exit(0)})},e.prototype.initGit=function(){return new Promise(function(e){return function(t){return fs.existsSync(".git")?t():e.git.exec("init",function(){return t()})}}(this))},e.prototype.addEverything=function(){return new Promise(function(e){return function(t,n){return e.git.exec("add",["."],function(e){return e?n(e):t()})}}(this))},e.prototype.commit=function(e){return new Promise(function(t){return function(n){return t.git.exec("commit",{m:!0},["'"+e+"'"],function(){return n()})}}(this))},e.prototype.pushToMainBranch=function(){return new Promise(function(e){return function(t){return e.ensureAppAndRepoExist().then(function(){return e.getMainBranch().then(function(n){return e.push(n).then(function(){return t(n)})})})}}(this))},e.prototype.ensureAppAndRepoExist=function(){return new Promise(function(e){return function(t){return e.repoExist().then(function(n){return n?t():e.askToCreateApp().then(t)})}}(this))},e.prototype.askToCreateApp=function(){return new Promise(function(){return function(e){return inquirer.prompt({message:"This app is not deployed yet. Would you like create a new closeheat app and deploy via Github?",type:"confirm",name:"create"},function(t){return t.create?(new Initializer).init().then(e):Log.error("You cannot deploy this app without the closeheat backend and Github setup")})}}(this))},e.prototype.repoExist=function(){return new Promise(function(e){return function(t,n){return e.git.exec("remote",function(e,r){var o;return e?n(e):(o=r.match(/origin/),t(o))})}}(this))},e.prototype.getMainBranch=function(){return new Promise(function(e){return function(t,n){return e.git.exec("symbolic-ref",["--short","HEAD"],function(e,r){return e?n(e):t(r.trim())})}}(this))},e.prototype.push=function(e){return new Promise(function(t){return function(n,r){return t.git.exec("push",["origin",e],function(e){return e?r(e):n()})}}(this))},t=/origin*.+:(.+\/.+).git \(push\)/,e.prototype.getOriginRepo=function(){return new Promise(function(e){return function(n,r){return e.git.exec("remote",["--verbose"],function(e,o){return e?r(e):n(o.match(t)[1])})}}(this))},e.prototype.open=function(){return this.getOriginRepo().then(function(e){return function(t){return e.getSlug(t).then(function(e){var t;return t="http://"+e+".closeheatapp.com",Log.p("Opening your app at "+t+"."),open(t)})}}(this))},e.prototype.getSlug=function(e){return new Promise(function(t,n){return Authorized.request({url:Urls.deployedSlug(),qs:{repo:e},method:"post",json:!0},function(r,o){var i;return r?n(r):_.isUndefined(o.body.slug)?(i="Could not find your closeheat app with GitHub repo '"+e+"'. Please deploy the app via UI",Log.error(i)):t(o.body.slug)})})},e}();
//# sourceMappingURL=data:application/json;base64,